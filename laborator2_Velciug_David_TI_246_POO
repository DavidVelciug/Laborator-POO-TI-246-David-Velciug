#include <cassert>
#include <iostream>
#include <stdexcept>

class abstract_data_t {
private:
    struct Node {
        int data;
        Node* prev;
        Node* next;
        
        Node(int value) : data(value), prev(nullptr), next(nullptr) {
            std::cout << "Узел создан со значением: " << value << std::endl;
        }
        
        ~Node() {
            std::cout << "Узел уничтожен со значением: " << data << std::endl;
        }
    };
    
    Node* head;
    Node* tail;
    size_t list_size;

public:
    // Конструктор по умолчанию
    abstract_data_t() : head(nullptr), tail(nullptr), list_size(0) {
        std::cout << "Конструктор по умолчанию вызван" << std::endl;
    }
    
    // Конструктор с размером
    abstract_data_t(size_t size) : head(nullptr), tail(nullptr), list_size(0) {
        std::cout << "Конструктор с размером вызван с размером: " << size << std::endl;
        for (size_t i = 0; i < size; ++i) {
            push_back(0);
        }
    }
    
    // Конструктор из массива
    abstract_data_t(const int array[], size_t size) : head(nullptr), tail(nullptr), list_size(0) {
        std::cout << "Конструктор из массива вызван с размером: " << size << std::endl;
        for (size_t i = 0; i < size; ++i) {
            push_back(array[i]);
        }
    }
    
    // Конструктор копирования
    abstract_data_t(const abstract_data_t& other) : head(nullptr), tail(nullptr), list_size(0) {
        std::cout << "Конструктор копирования вызван" << std::endl;
        Node* current = other.head;
        while (current != nullptr) {
            push_back(current->data);
            current = current->next;
        }
    }
    
    // Конструктор перемещения
    abstract_data_t(abstract_data_t&& other) noexcept 
        : head(other.head), tail(other.tail), list_size(other.list_size) {
        std::cout << "Конструктор перемещения вызван" << std::endl;
        other.head = nullptr;
        other.tail = nullptr;
        other.list_size = 0;
    }
    
    // Оператор присваивания копированием
    abstract_data_t& operator=(const abstract_data_t& other) {
        std::cout << "Оператор присваивания копированием вызван" << std::endl;
        if (this != &other) {
            clear();
            Node* current = other.head;
            while (current != nullptr) {
                push_back(current->data);
                current = current->next;
            }
        }
        return *this;
    }
    
    // Оператор присваивания перемещением
    abstract_data_t& operator=(abstract_data_t&& other) noexcept {
        std::cout << "Оператор присваивания перемещением вызван" << std::endl;
        if (this != &other) {
            clear();
            head = other.head;
            tail = other.tail;
            list_size = other.list_size;
            other.head = nullptr;
            other.tail = nullptr;
            other.list_size = 0;
        }
        return *this;
    }
    
    // Деструктор
    ~abstract_data_t() {
        std::cout << "Деструктор вызван, размер: " << list_size << std::endl;
        clear();
    }
    
    // Очистка списка
    void clear() {
        std::cout << "Метод clear вызван" << std::endl;
        while (head != nullptr) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
        tail = nullptr;
        list_size = 0;
    }
    
    // Доступ к элементу по индексу
    int at(int index) {
        std::cout << "Метод at вызван с индексом: " << index << std::endl;
        
        if (empty()) {
            throw std::out_of_range("Список пуст");
        }
        
        // Обработка отрицательных индексов
        if (index < 0) {
            index = list_size + index;
        }
        
        // Проверка границ
        if (index < 0) {
            return head->data;
        }
        if (index >= static_cast<int>(list_size)) {
            return tail->data;
        }
        
        // Поиск элемента
        Node* current = head;
        for (int i = 0; i < index && current != nullptr; ++i) {
            current = current->next;
        }
        
        return current->data;
    }
    
    // Изменение размера
    void resize(size_t new_size) {
        std::cout << "Метод resize вызван для изменения с " << list_size << " на " << new_size << std::endl;
        
        if (new_size < list_size) {
            // Удаляем лишние элементы с конца
            while (list_size > new_size) {
                pop_back();
            }
        } else if (new_size > list_size) {
            // Добавляем новые элементы с значением 0
            while (list_size < new_size) {
                push_back(0);
            }
        }
    }
    
    // Заполнение списка
    void assign(size_t count, int value) {
        std::cout << "Метод assign вызван с количеством: " << count << ", значением: " << value << std::endl;
        
        clear();
        for (size_t i = 0; i < count; ++i) {
            push_back(value);
        }
    }
    
    // Проверка на пустоту
    bool empty() {
        return list_size == 0;
    }
    
    // Обмен содержимым
    void swap(abstract_data_t& other) {
        std::cout << "Метод swap вызван" << std::endl;
        
        std::swap(head, other.head);
        std::swap(tail, other.tail);
        std::swap(list_size, other.list_size);
    }
    
    // Размер списка
    size_t size() {
        return list_size;
    }
    
    // Метод length для совместимости с main
    size_t length() {
        return size();
    }
    
    // Статический метод сравнения
    static bool is_equal(const abstract_data_t& list1, const abstract_data_t& list2) {
        std::cout << "Статический метод is_equal вызван" << std::endl;
        
        if (list1.list_size != list2.list_size) {
            return false;
        }
        
        Node* current1 = list1.head;
        Node* current2 = list2.head;
        
        while (current1 != nullptr && current2 != nullptr) {
            if (current1->data != current2->data) {
                return false;
            }
            current1 = current1->next;
            current2 = current2->next;
        }
        
        return true;
    }

private:
    // Вспомогательные методы
    void push_back(int value) {
        Node* new_node = new Node(value);
        
        if (tail == nullptr) {
            head = tail = new_node;
        } else {
            tail->next = new_node;
            new_node->prev = tail;
            tail = new_node;
        }
        list_size++;
    }
    
    void pop_back() {
        if (tail == nullptr) return;
        
        Node* temp = tail;
        if (tail->prev != nullptr) {
            tail = tail->prev;
            tail->next = nullptr;
        } else {
            head = tail = nullptr;
        }
        
        delete temp;
        list_size--;
    }
};

// Внешняя функция print для совместимости с main
void print(abstract_data_t& list) {
    std::cout << "Вывод списка: [";
    // Для простоты выведем только первые 10 элементов
    for (size_t i = 0; i < list.length() && i < 10; ++i) {
        std::cout << list.at(i);
        if (i < list.length() - 1 && i < 9) {
            std::cout << " ";
        }
    }
    if (list.length() > 10) {
        std::cout << " ...";
    }
    std::cout << "]" << std::endl;
}

int main()
{
    int array[] = {1, 4, 7, 9};

    abstract_data_t a(array, 4);
    assert(4 == a.length());
    assert(1 == a.at(0));
    assert(9 == a.at(10));
    print(a);

    abstract_data_t b(a);
    b.clear();
    assert(b.empty());

    abstract_data_t c;
    assert(c.empty());
    c.assign(3, 7);
    assert(3 == c.length());

    abstract_data_t d(5);
    assert(5 == d.length());
    d.resize(10);
    b.swap(d);
    assert(10 == b.length());
    assert(d.empty());
}
